
/* MACHINE GENERATED By Halide. */

pure int max(int x, int y) = x > y ? x : y;

pure int min(int x, int y) = x > y ? y : x;

pure rational max(rational x, rational y) = x > y ? x : y;

pure rational min(rational x, rational y) = x > y ? y : x;

pure int abs(int x) = x > 0 ? x : -x;

pure rational int_to_float(int x);

pure int float_to_int(rational x);

    class halide_buffer_int {
   int[] host;
    int min_0;
    int min_1;
    int min_2;

    int extent_0;
    int extent_1;
    int extent_2;

    int stride_0;
    int stride_1;
    int stride_2;
}

requires Perm(b.host, read);
pure int[] _halide_buffer_get_host(halide_buffer_int b) = b.host;

requires 0 <= dim && dim < 3;
requires dim == 0 ==> Perm(b.min_0, read);
requires dim == 1 ==> Perm(b.min_1, read);
requires dim == 2 ==> Perm(b.min_2, read);
pure int _halide_buffer_get_min(halide_buffer_int b, int dim) = dim == 0 ? b.min_0 : (dim == 1 ? b.min_1 : b.min_2);


requires 0 <= dim && dim < 3;
requires dim == 0 ==> Perm(b.stride_0, read);
requires dim == 1 ==> Perm(b.stride_1, read);
requires dim == 2 ==> Perm(b.stride_2, read);
pure int _halide_buffer_get_stride(halide_buffer_int b, int dim) = dim == 0 ? b.stride_0 : (dim == 1 ? b.stride_1 : b.stride_2);

requires 0 <= dim && dim < 3;
requires dim == 0 ==> Perm(b.extent_0, read);
requires dim == 1 ==> Perm(b.extent_1, read);
requires dim == 2 ==> Perm(b.extent_2, read);
pure int _halide_buffer_get_extent(halide_buffer_int b, int dim) = dim == 0 ? b.extent_0 : (dim == 1 ? b.extent_1 : b.extent_2);

    class halide_buffer_rational {
   rational[] host;
    int min_0;
    int min_1;
    int min_2;

    int extent_0;
    int extent_1;
    int extent_2;

    int stride_0;
    int stride_1;
    int stride_2;
}

requires Perm(b.host, read);
pure rational[] _halide_buffer_get_host(halide_buffer_rational b) = b.host;

requires 0 <= dim && dim < 3;
requires dim == 0 ==> Perm(b.min_0, read);
requires dim == 1 ==> Perm(b.min_1, read);
requires dim == 2 ==> Perm(b.min_2, read);
pure int _halide_buffer_get_min(halide_buffer_rational b, int dim) = dim == 0 ? b.min_0 : (dim == 1 ? b.min_1 : b.min_2);


requires 0 <= dim && dim < 3;
requires dim == 0 ==> Perm(b.stride_0, read);
requires dim == 1 ==> Perm(b.stride_1, read);
requires dim == 2 ==> Perm(b.stride_2, read);
pure int _halide_buffer_get_stride(halide_buffer_rational b, int dim) = dim == 0 ? b.stride_0 : (dim == 1 ? b.stride_1 : b.stride_2);

requires 0 <= dim && dim < 3;
requires dim == 0 ==> Perm(b.extent_0, read);
requires dim == 1 ==> Perm(b.extent_1, read);
requires dim == 2 ==> Perm(b.extent_2, read);
pure int _halide_buffer_get_extent(halide_buffer_rational b, int dim) = dim == 0 ? b.extent_0 : (dim == 1 ? b.extent_1 : b.extent_2);



 context Perm(_inp_buffer.host, read) ** _inp_buffer.host != null;
 context Perm(_inp_buffer.min_0, read) ** Perm(_inp_buffer.stride_0, read) ** Perm(_inp_buffer.extent_0, read);
 context Perm(_inp_buffer.min_1, read) ** Perm(_inp_buffer.stride_1, read) ** Perm(_inp_buffer.extent_1, read);
 context Perm(_inp_buffer.host, read) ** _inp_buffer.host != null;
 context _inp_buffer.host.length == 1  + abs(_inp_buffer.stride_0) * (_inp_buffer.extent_0 - 1) + abs(_inp_buffer.stride_1) * (_inp_buffer.extent_1 - 1);
 context Perm(_blur_y_buffer.host, read) ** _blur_y_buffer.host != null;
 context Perm(_blur_y_buffer.min_0, read) ** Perm(_blur_y_buffer.stride_0, read) ** Perm(_blur_y_buffer.extent_0, read);
 context Perm(_blur_y_buffer.min_1, read) ** Perm(_blur_y_buffer.stride_1, read) ** Perm(_blur_y_buffer.extent_1, read);
 context Perm(_blur_y_buffer.host, read) ** _blur_y_buffer.host != null;
 context _blur_y_buffer.host.length == 1  + abs(_blur_y_buffer.stride_0) * (_blur_y_buffer.extent_0 - 1) + abs(_blur_y_buffer.stride_1) * (_blur_y_buffer.extent_1 - 1);
 context ((_inp_buffer.min_0 == 0) && (_inp_buffer.extent_0 == 1026)) && (_inp_buffer.stride_0 == 1);
 context ((_inp_buffer.min_1 == 0) && (_inp_buffer.extent_1 == 1026)) && (_inp_buffer.stride_1 == 1026);
 context (\forall* int _0, int _1; (((0 <= _0) && (_0 < 1026)) && (0 <= _1)) && (_1 < 1026); Perm(_inp_buffer.host[(_1*1026) + _0], read));
 context ((_blur_y_buffer.min_0 == 1) && (_blur_y_buffer.extent_0 == 1024)) && (_blur_y_buffer.stride_0 == 1);
 context ((_blur_y_buffer.min_1 == 1) && (_blur_y_buffer.extent_1 == 1024)) && (_blur_y_buffer.stride_1 == 1024);
 context (\forall* int _0, int _1; (((1 <= _0) && (_0 < 1025)) && (1 <= _1)) && (_1 < 1025); Perm(_blur_y_buffer.host[((_1*1024) + _0) + -1025], 1\1));
 // ensures (\forall int _0, int _1; (((1 <= _0) && (_0 < 1025)) && (1 <= _1)) && (_1 < 1025); _blur_y_buffer.host[((_1*1024) + _0) + -1025] == ((((_inp_buffer.host[((_1*1026) + _0) + 1027] + (_inp_buffer.host[((_1*1026) + _0) + 1025] + _inp_buffer.host[((_1*1026) + _0) + 1026]))/3) + (((_inp_buffer.host[((_1*1026) + _0) + -1025] + (_inp_buffer.host[((_1*1026) + _0) + -1027] + _inp_buffer.host[((_1*1026) + _0) + -1026]))/3) + ((_inp_buffer.host[((_1*1026) + _0) + 1] + (_inp_buffer.host[((_1*1026) + _0) + -1] + _inp_buffer.host[(_1*1026) + _0]))/3)))/3));
int blur(halide_buffer_int _inp_buffer, halide_buffer_int _blur_y_buffer) {
 int[] _blur_y = _halide_buffer_get_host(_blur_y_buffer);
 int _blur_y_min_0 = _halide_buffer_get_min(_blur_y_buffer, 0);
 int _blur_y_extent_0 = _halide_buffer_get_extent(_blur_y_buffer, 0);
 int _blur_y_stride_0 = _halide_buffer_get_stride(_blur_y_buffer, 0);
 int _blur_y_min_1 = _halide_buffer_get_min(_blur_y_buffer, 1);
 int _blur_y_extent_1 = _halide_buffer_get_extent(_blur_y_buffer, 1);
 int _blur_y_stride_1 = _halide_buffer_get_stride(_blur_y_buffer, 1);
 int[] _inp = _halide_buffer_get_host(_inp_buffer);
 int _inp_min_0 = _halide_buffer_get_min(_inp_buffer, 0);
 int _inp_extent_0 = _halide_buffer_get_extent(_inp_buffer, 0);
 int _inp_stride_0 = _halide_buffer_get_stride(_inp_buffer, 0);
 int _inp_min_1 = _halide_buffer_get_min(_inp_buffer, 1);
 int _inp_extent_1 = _halide_buffer_get_extent(_inp_buffer, 1);
 int _inp_stride_1 = _halide_buffer_get_stride(_inp_buffer, 1);
 // produce blur_y
 par threads(int _blur_y_s0_y_y = 0 .. (0 + 128))
  context 0 <= _blur_y_s0_y_y && _blur_y_s0_y_y < 0 + 128;
  context (\forall* int _0, int _1; ((0 <= _0) && (_0 < 1026)) && ((0 <= _1) && (_1 < 1026)); Perm(_inp[(_1*1026) + _0], read));
  context (\forall* int _blur_y_s0_x_v0_forall, int _blur_y_s0_x_x_forall, int _blur_y_s0_y_yi_forall; (((((0 <= _blur_y_s0_y_yi_forall) && (_blur_y_s0_y_yi_forall < 8)) && (0 <= _blur_y_s0_x_x_forall)) && (_blur_y_s0_x_x_forall < 128)) && (0 <= _blur_y_s0_x_v0_forall)) && (_blur_y_s0_x_v0_forall < 8); Perm(_blur_y[(((_blur_y_s0_y_y*8) + _blur_y_s0_y_yi_forall)*1024) + ((_blur_y_s0_x_x_forall*8) + _blur_y_s0_x_v0_forall)], 1\1));
  // ensures (\forall int _blur_y_s0_y_yi_forall, int _blur_y_s0_x_x_forall, int _blur_y_s0_x_v0_forall; (((((0 <= _blur_y_s0_y_yi_forall) && (_blur_y_s0_y_yi_forall < 8)) && (0 <= _blur_y_s0_x_x_forall)) && (_blur_y_s0_x_x_forall < 128)) && (0 <= _blur_y_s0_x_v0_forall)) && (_blur_y_s0_x_v0_forall < 8); _blur_y[(((_blur_y_s0_y_y*8) + _blur_y_s0_y_yi_forall)*1024) + ((_blur_y_s0_x_x_forall*8) + _blur_y_s0_x_v0_forall)] == ((((_inp[((((_blur_y_s0_y_y*8) + _blur_y_s0_y_yi_forall)*1026) + ((_blur_y_s0_x_x_forall*8) + _blur_y_s0_x_v0_forall)) + 1027] + (_inp[((((_blur_y_s0_y_y*8) + _blur_y_s0_y_yi_forall)*1026) + ((_blur_y_s0_x_x_forall*8) + _blur_y_s0_x_v0_forall)) + 1028] + _inp[((((_blur_y_s0_y_y*8) + _blur_y_s0_y_yi_forall)*1026) + ((_blur_y_s0_x_x_forall*8) + _blur_y_s0_x_v0_forall)) + 1026]))/3) + (((_inp[((((_blur_y_s0_y_y*8) + _blur_y_s0_y_yi_forall)*1026) + ((_blur_y_s0_x_x_forall*8) + _blur_y_s0_x_v0_forall)) + 2053] + (_inp[((((_blur_y_s0_y_y*8) + _blur_y_s0_y_yi_forall)*1026) + ((_blur_y_s0_x_x_forall*8) + _blur_y_s0_x_v0_forall)) + 2054] + _inp[((((_blur_y_s0_y_y*8) + _blur_y_s0_y_yi_forall)*1026) + ((_blur_y_s0_x_x_forall*8) + _blur_y_s0_x_v0_forall)) + 2052]))/3) + ((_inp[((((_blur_y_s0_y_y*8) + _blur_y_s0_y_yi_forall)*1026) + ((_blur_y_s0_x_x_forall*8) + _blur_y_s0_x_v0_forall)) + 1] + (_inp[((((_blur_y_s0_y_y*8) + _blur_y_s0_y_yi_forall)*1026) + ((_blur_y_s0_x_x_forall*8) + _blur_y_s0_x_v0_forall)) + 2] + _inp[(((_blur_y_s0_y_y*8) + _blur_y_s0_y_yi_forall)*1026) + ((_blur_y_s0_x_x_forall*8) + _blur_y_s0_x_v0_forall)]))/3)))/3));
 {
  {
   int[] _blur_x = new int[1024 * 10];
   int _t34 = (_blur_y_s0_y_y * 8);
    loop_invariant 0 <= _blur_y_s0_y_yi && _blur_y_s0_y_yi <= 0 + 8;
    loop_invariant (\forall* int _0, int _1; ((0 <= _0) && (_0 < 1026)) && ((0 <= _1) && (_1 < 1026)); Perm(_inp[(_1*1026) + _0], read));
    loop_invariant (\forall* int _x, int _y; (((1 <= _x) && (_x < 1025)) && ((_blur_y_s0_y_y*8) <= _y)) && (_y < ((_blur_y_s0_y_y*8) + 10)); Perm(_blur_x[(((_y - (_blur_y_s0_y_y*8))*1024) + _x) + -1], 1\1));
    loop_invariant (\forall* int _blur_y_s0_x_v0_forall, int _blur_y_s0_x_x_forall, int _blur_y_s0_y_yi_forall; (((((0 <= _blur_y_s0_y_yi_forall) && (_blur_y_s0_y_yi_forall < 8)) && (0 <= _blur_y_s0_x_x_forall)) && (_blur_y_s0_x_x_forall < 128)) && (0 <= _blur_y_s0_x_v0_forall)) && (_blur_y_s0_x_v0_forall < 8); Perm(_blur_y[(((_blur_y_s0_y_y*8) + _blur_y_s0_y_yi_forall)*1024) + ((_blur_y_s0_x_x_forall*8) + _blur_y_s0_x_v0_forall)], 1\1));
    // loop_invariant (\forall int _blur_y_s0_y_yi_forall, int _blur_y_s0_x_x_forall, int _blur_y_s0_x_v0_forall; (((((0 <= _blur_y_s0_y_yi_forall) && (_blur_y_s0_y_yi_forall < _blur_y_s0_y_yi)) && (0 <= _blur_y_s0_x_x_forall)) && (_blur_y_s0_x_x_forall < 128)) && (0 <= _blur_y_s0_x_v0_forall)) && (_blur_y_s0_x_v0_forall < 8); _blur_y[(((_blur_y_s0_y_y*8) + _blur_y_s0_y_yi_forall)*1024) + ((_blur_y_s0_x_x_forall*8) + _blur_y_s0_x_v0_forall)] == ((((_inp[((((_blur_y_s0_y_y*8) + _blur_y_s0_y_yi_forall)*1026) + ((_blur_y_s0_x_x_forall*8) + _blur_y_s0_x_v0_forall)) + 1027] + (_inp[((((_blur_y_s0_y_y*8) + _blur_y_s0_y_yi_forall)*1026) + ((_blur_y_s0_x_x_forall*8) + _blur_y_s0_x_v0_forall)) + 1028] + _inp[((((_blur_y_s0_y_y*8) + _blur_y_s0_y_yi_forall)*1026) + ((_blur_y_s0_x_x_forall*8) + _blur_y_s0_x_v0_forall)) + 1026]))/3) + (((_inp[((((_blur_y_s0_y_y*8) + _blur_y_s0_y_yi_forall)*1026) + ((_blur_y_s0_x_x_forall*8) + _blur_y_s0_x_v0_forall)) + 2053] + (_inp[((((_blur_y_s0_y_y*8) + _blur_y_s0_y_yi_forall)*1026) + ((_blur_y_s0_x_x_forall*8) + _blur_y_s0_x_v0_forall)) + 2054] + _inp[((((_blur_y_s0_y_y*8) + _blur_y_s0_y_yi_forall)*1026) + ((_blur_y_s0_x_x_forall*8) + _blur_y_s0_x_v0_forall)) + 2052]))/3) + ((_inp[((((_blur_y_s0_y_y*8) + _blur_y_s0_y_yi_forall)*1026) + ((_blur_y_s0_x_x_forall*8) + _blur_y_s0_x_v0_forall)) + 1] + (_inp[((((_blur_y_s0_y_y*8) + _blur_y_s0_y_yi_forall)*1026) + ((_blur_y_s0_x_x_forall*8) + _blur_y_s0_x_v0_forall)) + 2] + _inp[(((_blur_y_s0_y_y*8) + _blur_y_s0_y_yi_forall)*1026) + ((_blur_y_s0_x_x_forall*8) + _blur_y_s0_x_v0_forall)]))/3)))/3));
   for (int _blur_y_s0_y_yi = 0; _blur_y_s0_y_yi < 0 + 8; _blur_y_s0_y_yi++)
   {
    // produce blur_x
    int _t35 = (_blur_y_s0_y_yi + _t34);
     loop_invariant _t35 <= _blur_x_s0_y && _blur_x_s0_y <= _t35 + 3;
     loop_invariant (\forall* int _0, int _1; ((0 <= _0) && (_0 < 1026)) && ((0 <= _1) && (_1 < 1026)); Perm(_inp[(_1*1026) + _0], read));
     loop_invariant (\forall* int _blur_x_s0_x_v1_forall, int _blur_x_s0_x_x_forall, int _blur_x_s0_y_forall; (((((((_blur_y_s0_y_y*8) + _blur_y_s0_y_yi) <= _blur_x_s0_y_forall) && (_blur_x_s0_y_forall < (((_blur_y_s0_y_y*8) + _blur_y_s0_y_yi) + 3))) && (0 <= _blur_x_s0_x_x_forall)) && (_blur_x_s0_x_x_forall < 128)) && (0 <= _blur_x_s0_x_v1_forall)) && (_blur_x_s0_x_v1_forall < 8); Perm(_blur_x[((_blur_x_s0_y_forall - (_blur_y_s0_y_y*8))*1024) + ((_blur_x_s0_x_x_forall*8) + _blur_x_s0_x_v1_forall)], 1\1));
     // loop_invariant (\forall int _blur_x_s0_y_forall, int _blur_x_s0_x_x_forall, int _blur_x_s0_x_v1_forall; (((((((_blur_y_s0_y_y*8) + _blur_y_s0_y_yi) <= _blur_x_s0_y_forall) && (_blur_x_s0_y_forall < _blur_x_s0_y)) && (0 <= _blur_x_s0_x_x_forall)) && (_blur_x_s0_x_x_forall < 128)) && (0 <= _blur_x_s0_x_v1_forall)) && (_blur_x_s0_x_v1_forall < 8); _blur_x[((_blur_x_s0_y_forall - (_blur_y_s0_y_y*8))*1024) + ((_blur_x_s0_x_x_forall*8) + _blur_x_s0_x_v1_forall)] == ((_inp[(((_blur_x_s0_y_forall*1026) + (_blur_x_s0_x_x_forall*8)) + _blur_x_s0_x_v1_forall) + 1] + (_inp[(((_blur_x_s0_y_forall*1026) + (_blur_x_s0_x_x_forall*8)) + _blur_x_s0_x_v1_forall) + 2] + _inp[((_blur_x_s0_y_forall*1026) + (_blur_x_s0_x_x_forall*8)) + _blur_x_s0_x_v1_forall]))/3));
    for (int _blur_x_s0_y = _t35; _blur_x_s0_y < _t35 + 3; _blur_x_s0_y++)
    {
     int _t37 = ((_blur_x_s0_y - _t34) * 128);
     int _t36 = (_blur_x_s0_y * 1026);
      loop_invariant 0 <= _blur_x_s0_x_x && _blur_x_s0_x_x <= 0 + 128;
      loop_invariant (\forall* int _0, int _1; ((0 <= _0) && (_0 < 1026)) && ((0 <= _1) && (_1 < 1026)); Perm(_inp[(_1*1026) + _0], read));
      loop_invariant (\forall* int xv1f, int xxf; (((0 <= xxf) && (xxf < 128)) && (0 <= xv1f)) && (xv1f < 8); Perm(_blur_x[((_blur_x_s0_y - (_blur_y_s0_y_y*8))*1024) + ((xxf*8) + xv1f)], 1\1));
      loop_invariant (\forall int xxf, int xv1f; (((0 <= xxf) && (xxf < _blur_x_s0_x_x)) && xv1f==0 && (0 <= xv1f)) && (xv1f < 8); _blur_x[((_blur_x_s0_y - (_blur_y_s0_y_y*8))*1024) + ((xxf*8) + xv1f)] == ((_inp[((_blur_x_s0_y*1026) + ((xxf*8) + xv1f)) + 1] + (_inp[((_blur_x_s0_y*1026) + ((xxf*8) + xv1f)) + 2] + _inp[(_blur_x_s0_y*1026) + ((xxf*8) + xv1f)]))/3));
      loop_invariant (\forall int xxf, int xv1f; (((0 <= xxf) && (xxf < _blur_x_s0_x_x)) && xv1f==7 && (0 <= xv1f)) && (xv1f < 8); _blur_x[((_blur_x_s0_y - (_blur_y_s0_y_y*8))*1024) + ((xxf*8) + xv1f)] == ((_inp[((_blur_x_s0_y*1026) + ((xxf*8) + xv1f)) + 1] + (_inp[((_blur_x_s0_y*1026) + ((xxf*8) + xv1f)) + 2] + _inp[(_blur_x_s0_y*1026) + ((xxf*8) + xv1f)]))/3));
      loop_invariant (\forall int xxf, int xv1f; (((0 <= xxf) && (xxf < _blur_x_s0_x_x)) && (0 <= xv1f)) && (xv1f < 8); _blur_x[((_blur_x_s0_y - (_blur_y_s0_y_y*8))*1024) + ((xxf*8) + xv1f)] == ((_inp[((_blur_x_s0_y*1026) + ((xxf*8) + xv1f)) + 1] + (_inp[((_blur_x_s0_y*1026) + ((xxf*8) + xv1f)) + 2] + _inp[(_blur_x_s0_y*1026) + ((xxf*8) + xv1f)]))/3));
     for (int _blur_x_s0_x_x = 0; _blur_x_s0_x_x < 0 + 128; _blur_x_s0_x_x++)
     {
      int _t25 = ((_blur_x_s0_x_x * 8) + _t36);
      _blur_x[((_blur_x_s0_x_x + _t37) * 8)] = ((_inp[(_t25 + 1)] + (_inp[(_t25 + 2)] + _inp[_t25])) / 3);
      _blur_x[(((_blur_x_s0_x_x + _t37) * 8) + 1)] = ((_inp[(_t25 + 2)] + (_inp[(_t25 + 3)] + _inp[(_t25 + 1)])) / 3);
      _blur_x[(((_blur_x_s0_x_x + _t37) * 8) + 2)] = ((_inp[(_t25 + 3)] + (_inp[(_t25 + 4)] + _inp[(_t25 + 2)])) / 3);
      _blur_x[(((_blur_x_s0_x_x + _t37) * 8) + 3)] = ((_inp[(_t25 + 4)] + (_inp[(_t25 + 5)] + _inp[(_t25 + 3)])) / 3);
      _blur_x[(((_blur_x_s0_x_x + _t37) * 8) + 4)] = ((_inp[(_t25 + 5)] + (_inp[(_t25 + 6)] + _inp[(_t25 + 4)])) / 3);
      _blur_x[(((_blur_x_s0_x_x + _t37) * 8) + 5)] = ((_inp[(_t25 + 6)] + (_inp[(_t25 + 7)] + _inp[(_t25 + 5)])) / 3);
      _blur_x[(((_blur_x_s0_x_x + _t37) * 8) + 6)] = ((_inp[(_t25 + 7)] + (_inp[(_t25 + 8)] + _inp[(_t25 + 6)])) / 3);
      _blur_x[(((_blur_x_s0_x_x + _t37) * 8) + 7)] = ((_inp[(_t25 + 8)] + (_inp[(_t25 + 9)] + _inp[(_t25 + 7)])) / 3);
     } // for _blur_x_s0_x_x
    } // for _blur_x_s0_y
    // consume blur_x
    int _t39 = ((_blur_y_s0_y_yi + _t34) * 128);
    int _t38 = (_blur_y_s0_y_yi * 128);
     loop_invariant 0 <= _blur_y_s0_x_x && _blur_y_s0_x_x <= 0 + 128;
     loop_invariant (\forall* int _0, int _1; ((0 <= _0) && (_0 < 1026)) && ((0 <= _1) && (_1 < 1026)); Perm(_inp[(_1*1026) + _0], read));
     loop_invariant (\forall* int _x, int _y; (((1 <= _x) && (_x < 1025)) && ((_blur_y_s0_y_y*8) <= _y)) && (_y < ((_blur_y_s0_y_y*8) + 10)); Perm(_blur_x[(((_y - (_blur_y_s0_y_y*8))*1024) + _x) + -1], 1\2));
     // loop_invariant (\forall int _blur_x_s0_x, int _blur_x_s0_y; (((1 <= _blur_x_s0_x) && (_blur_x_s0_x <= 1024)) && (((_blur_y_s0_y_y*8) + _blur_y_s0_y_yi) <= _blur_x_s0_y)) && (_blur_x_s0_y <= (((_blur_y_s0_y_y*8) + _blur_y_s0_y_yi) + 2)); _blur_x[(((_blur_x_s0_y - (_blur_y_s0_y_y*8))*1024) + _blur_x_s0_x) + -1] == ((_inp[(_blur_x_s0_y*1026) + _blur_x_s0_x] + (_inp[((_blur_x_s0_y*1026) + _blur_x_s0_x) + 1] + _inp[((_blur_x_s0_y*1026) + _blur_x_s0_x) + -1]))/3));
     loop_invariant (\forall* int _blur_y_s0_x_v0_forall, int _blur_y_s0_x_x_forall; (((0 <= _blur_y_s0_x_x_forall) && (_blur_y_s0_x_x_forall < 128)) && (0 <= _blur_y_s0_x_v0_forall)) && (_blur_y_s0_x_v0_forall < 8); Perm(_blur_y[(((_blur_y_s0_y_y*8) + _blur_y_s0_y_yi)*1024) + ((_blur_y_s0_x_x_forall*8) + _blur_y_s0_x_v0_forall)], 1\1));
     // loop_invariant (\forall int _blur_y_s0_x_x_forall, int _blur_y_s0_x_v0_forall; (((0 <= _blur_y_s0_x_x_forall) && (_blur_y_s0_x_x_forall < _blur_y_s0_x_x)) && (0 <= _blur_y_s0_x_v0_forall)) && (_blur_y_s0_x_v0_forall < 8); _blur_y[(((_blur_y_s0_y_y*8) + _blur_y_s0_y_yi)*1024) + ((_blur_y_s0_x_x_forall*8) + _blur_y_s0_x_v0_forall)] == ((((_inp[((((_blur_y_s0_y_y*8) + _blur_y_s0_y_yi)*1026) + ((_blur_y_s0_x_x_forall*8) + _blur_y_s0_x_v0_forall)) + 1027] + (_inp[((((_blur_y_s0_y_y*8) + _blur_y_s0_y_yi)*1026) + ((_blur_y_s0_x_x_forall*8) + _blur_y_s0_x_v0_forall)) + 1028] + _inp[((((_blur_y_s0_y_y*8) + _blur_y_s0_y_yi)*1026) + ((_blur_y_s0_x_x_forall*8) + _blur_y_s0_x_v0_forall)) + 1026]))/3) + (((_inp[((((_blur_y_s0_y_y*8) + _blur_y_s0_y_yi)*1026) + ((_blur_y_s0_x_x_forall*8) + _blur_y_s0_x_v0_forall)) + 2053] + (_inp[((((_blur_y_s0_y_y*8) + _blur_y_s0_y_yi)*1026) + ((_blur_y_s0_x_x_forall*8) + _blur_y_s0_x_v0_forall)) + 2054] + _inp[((((_blur_y_s0_y_y*8) + _blur_y_s0_y_yi)*1026) + ((_blur_y_s0_x_x_forall*8) + _blur_y_s0_x_v0_forall)) + 2052]))/3) + ((_inp[((((_blur_y_s0_y_y*8) + _blur_y_s0_y_yi)*1026) + ((_blur_y_s0_x_x_forall*8) + _blur_y_s0_x_v0_forall)) + 1] + (_inp[((((_blur_y_s0_y_y*8) + _blur_y_s0_y_yi)*1026) + ((_blur_y_s0_x_x_forall*8) + _blur_y_s0_x_v0_forall)) + 2] + _inp[(((_blur_y_s0_y_y*8) + _blur_y_s0_y_yi)*1026) + ((_blur_y_s0_x_x_forall*8) + _blur_y_s0_x_v0_forall)]))/3)))/3));
    for (int _blur_y_s0_x_x = 0; _blur_y_s0_x_x < 0 + 128; _blur_y_s0_x_x++)
    {
     int _t26 = (_blur_y_s0_x_x + _t38);
     _blur_y[((_blur_y_s0_x_x + _t39) * 8)] = ((_blur_x[((_t26 * 8) + 1024)] + (_blur_x[((_t26 * 8) + 2048)] + _blur_x[(_t26 * 8)])) / 3);
     int _t27 = (_blur_y_s0_x_x + _t38);
     _blur_y[(((_blur_y_s0_x_x + _t39) * 8) + 1)] = ((_blur_x[((_t27 * 8) + 1025)] + (_blur_x[((_t27 * 8) + 2049)] + _blur_x[((_t27 * 8) + 1)])) / 3);
     int _t28 = (_blur_y_s0_x_x + _t38);
     _blur_y[(((_blur_y_s0_x_x + _t39) * 8) + 2)] = ((_blur_x[((_t28 * 8) + 1026)] + (_blur_x[((_t28 * 8) + 2050)] + _blur_x[((_t28 * 8) + 2)])) / 3);
     int _t29 = (_blur_y_s0_x_x + _t38);
     _blur_y[(((_blur_y_s0_x_x + _t39) * 8) + 3)] = ((_blur_x[((_t29 * 8) + 1027)] + (_blur_x[((_t29 * 8) + 2051)] + _blur_x[((_t29 * 8) + 3)])) / 3);
     int _t30 = (_blur_y_s0_x_x + _t38);
     _blur_y[(((_blur_y_s0_x_x + _t39) * 8) + 4)] = ((_blur_x[((_t30 * 8) + 1028)] + (_blur_x[((_t30 * 8) + 2052)] + _blur_x[((_t30 * 8) + 4)])) / 3);
     int _t31 = (_blur_y_s0_x_x + _t38);
     _blur_y[(((_blur_y_s0_x_x + _t39) * 8) + 5)] = ((_blur_x[((_t31 * 8) + 1029)] + (_blur_x[((_t31 * 8) + 2053)] + _blur_x[((_t31 * 8) + 5)])) / 3);
     int _t32 = (_blur_y_s0_x_x + _t38);
     _blur_y[(((_blur_y_s0_x_x + _t39) * 8) + 6)] = ((_blur_x[((_t32 * 8) + 1030)] + (_blur_x[((_t32 * 8) + 2054)] + _blur_x[((_t32 * 8) + 6)])) / 3);
     int _t33 = (_blur_y_s0_x_x + _t38);
     _blur_y[(((_blur_y_s0_x_x + _t39) * 8) + 7)] = ((_blur_x[((_t33 * 8) + 1031)] + (_blur_x[((_t33 * 8) + 2055)] + _blur_x[((_t33 * 8) + 7)])) / 3);
    } // for _blur_y_s0_x_x
   } // for _blur_y_s0_y_yi
  } // alloc _blur_x
 } // for _blur_y_s0_y_y
 return 0;
}
