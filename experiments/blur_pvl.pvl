
/* MACHINE GENERATED By Halide. */

pure int max(int x, int y) = x > y ? x : y;

pure int min(int x, int y) = x > y ? y : x;

pure rational max(rational x, rational y) = x > y ? x : y;

pure rational min(rational x, rational y) = x > y ? y : x;

pure int abs(int x) = x > 0 ? x : -x;

pure rational int_to_float(int x);

pure int float_to_int(rational x);

    class halide_buffer_int {
   int[] host;
    int min_0;
    int min_1;
    int min_2;

    int extent_0;
    int extent_1;
    int extent_2;

    int stride_0;
    int stride_1;
    int stride_2;
}

requires Perm(b.host, read);
pure int[] _halide_buffer_get_host(halide_buffer_int b) = b.host;

requires 0 <= dim && dim < 3;
requires dim == 0 ==> Perm(b.min_0, read);
requires dim == 1 ==> Perm(b.min_1, read);
requires dim == 2 ==> Perm(b.min_2, read);
pure int _halide_buffer_get_min(halide_buffer_int b, int dim) = dim == 0 ? b.min_0 : (dim == 1 ? b.min_1 : b.min_2);


requires 0 <= dim && dim < 3;
requires dim == 0 ==> Perm(b.stride_0, read);
requires dim == 1 ==> Perm(b.stride_1, read);
requires dim == 2 ==> Perm(b.stride_2, read);
pure int _halide_buffer_get_stride(halide_buffer_int b, int dim) = dim == 0 ? b.stride_0 : (dim == 1 ? b.stride_1 : b.stride_2);

requires 0 <= dim && dim < 3;
requires dim == 0 ==> Perm(b.extent_0, read);
requires dim == 1 ==> Perm(b.extent_1, read);
requires dim == 2 ==> Perm(b.extent_2, read);
pure int _halide_buffer_get_extent(halide_buffer_int b, int dim) = dim == 0 ? b.extent_0 : (dim == 1 ? b.extent_1 : b.extent_2);

    class halide_buffer_rational {
   rational[] host;
    int min_0;
    int min_1;
    int min_2;

    int extent_0;
    int extent_1;
    int extent_2;

    int stride_0;
    int stride_1;
    int stride_2;
}

requires Perm(b.host, read);
pure rational[] _halide_buffer_get_host(halide_buffer_rational b) = b.host;

requires 0 <= dim && dim < 3;
requires dim == 0 ==> Perm(b.min_0, read);
requires dim == 1 ==> Perm(b.min_1, read);
requires dim == 2 ==> Perm(b.min_2, read);
pure int _halide_buffer_get_min(halide_buffer_rational b, int dim) = dim == 0 ? b.min_0 : (dim == 1 ? b.min_1 : b.min_2);


requires 0 <= dim && dim < 3;
requires dim == 0 ==> Perm(b.stride_0, read);
requires dim == 1 ==> Perm(b.stride_1, read);
requires dim == 2 ==> Perm(b.stride_2, read);
pure int _halide_buffer_get_stride(halide_buffer_rational b, int dim) = dim == 0 ? b.stride_0 : (dim == 1 ? b.stride_1 : b.stride_2);

requires 0 <= dim && dim < 3;
requires dim == 0 ==> Perm(b.extent_0, read);
requires dim == 1 ==> Perm(b.extent_1, read);
requires dim == 2 ==> Perm(b.extent_2, read);
pure int _halide_buffer_get_extent(halide_buffer_rational b, int dim) = dim == 0 ? b.extent_0 : (dim == 1 ? b.extent_1 : b.extent_2);



 context_everywhere Perm(_input_buffer.host, read) ** _input_buffer.host != null;
 context_everywhere Perm(_input_buffer.min_0, read) ** Perm(_input_buffer.stride_0, read) ** Perm(_input_buffer.extent_0, read);
 context_everywhere Perm(_input_buffer.min_1, read) ** Perm(_input_buffer.stride_1, read) ** Perm(_input_buffer.extent_1, read);
 context_everywhere Perm(_input_buffer.host, read) ** _input_buffer.host != null;
 context_everywhere _input_buffer.host.length == 1  + abs(_input_buffer.stride_0) * (_input_buffer.extent_0 - 1) + abs(_input_buffer.stride_1) * (_input_buffer.extent_1 - 1);
 context_everywhere Perm(_blur_y_buffer.host, read) ** _blur_y_buffer.host != null;
 context_everywhere Perm(_blur_y_buffer.min_0, read) ** Perm(_blur_y_buffer.stride_0, read) ** Perm(_blur_y_buffer.extent_0, read);
 context_everywhere Perm(_blur_y_buffer.min_1, read) ** Perm(_blur_y_buffer.stride_1, read) ** Perm(_blur_y_buffer.extent_1, read);
 context_everywhere Perm(_blur_y_buffer.host, read) ** _blur_y_buffer.host != null;
 context_everywhere _blur_y_buffer.host.length == 1  + abs(_blur_y_buffer.stride_0) * (_blur_y_buffer.extent_0 - 1) + abs(_blur_y_buffer.stride_1) * (_blur_y_buffer.extent_1 - 1);
 context_everywhere _input_buffer.min_0 == 0;
 context_everywhere _input_buffer.extent_0 == 1026;
 context_everywhere _input_buffer.stride_0 == 1;
 context_everywhere _input_buffer.min_1 == 0;
 context_everywhere _input_buffer.extent_1 == 1026;
 context_everywhere _input_buffer.stride_1 == 1026;
 context (\forall* int _0, int _1; (((0 <= _0) && (_0 < 1026)) && (0 <= _1)) && (_1 < 1026); Perm(_input_buffer.host[(_1*1026) + _0], read));
 requires (\forall int _0, int _1; (((0 <= _0) && (_0 < 1026)) && (0 <= _1)) && (_1 < 1026); 0 <= _input_buffer.host[(_1*1026) + _0]);
 requires (\forall int _0, int _1; (((0 <= _0) && (_0 < 1026)) && (0 <= _1)) && (_1 < 1026); _input_buffer.host[(_1*1026) + _0] < 256);
 context_everywhere _blur_y_buffer.min_0 == 0;
 context_everywhere _blur_y_buffer.extent_0 == 1024;
 context_everywhere _blur_y_buffer.stride_0 == 1;
 context_everywhere _blur_y_buffer.min_1 == 0;
 context_everywhere _blur_y_buffer.extent_1 == 1024;
 context_everywhere _blur_y_buffer.stride_1 == 1024;
 context (\forall* int _0, int _1; (((0 <= _0) && (_0 < 1024)) && (0 <= _1)) && (_1 < 1024); Perm(_blur_y_buffer.host[(_1*1024) + _0], 1\1));
 ensures (\forall int _0, int _1; (((0 <= _0) && (_0 < 1024)) && (0 <= _1)) && (_1 < 1024); 0 <= _blur_y_buffer.host[(_1*1024) + _0]);
 ensures (\forall int _0, int _1; (((0 <= _0) && (_0 < 1024)) && (0 <= _1)) && (_1 < 1024); _blur_y_buffer.host[(_1*1024) + _0] < 256);
int blur(halide_buffer_int _input_buffer, halide_buffer_int _blur_y_buffer) {
 int[] _blur_y = _halide_buffer_get_host(_blur_y_buffer);
 int _1 = _halide_buffer_get_min(_blur_y_buffer, 0);
 int _blur_y_min_0 = _1;
 int _2 = _halide_buffer_get_extent(_blur_y_buffer, 0);
 int _blur_y_extent_0 = _2;
 int _3 = _halide_buffer_get_stride(_blur_y_buffer, 0);
 int _blur_y_stride_0 = _3;
 int _4 = _halide_buffer_get_min(_blur_y_buffer, 1);
 int _blur_y_min_1 = _4;
 int _5 = _halide_buffer_get_extent(_blur_y_buffer, 1);
 int _blur_y_extent_1 = _5;
 int _6 = _halide_buffer_get_stride(_blur_y_buffer, 1);
 int _blur_y_stride_1 = _6;
 int[] _input = _halide_buffer_get_host(_input_buffer);
 int _8 = _halide_buffer_get_min(_input_buffer, 0);
 int _input_min_0 = _8;
 int _9 = _halide_buffer_get_extent(_input_buffer, 0);
 int _input_extent_0 = _9;
 int _10 = _halide_buffer_get_stride(_input_buffer, 0);
 int _input_stride_0 = _10;
 int _11 = _halide_buffer_get_min(_input_buffer, 1);
 int _input_min_1 = _11;
 int _12 = _halide_buffer_get_extent(_input_buffer, 1);
 int _input_extent_1 = _12;
 int _13 = _halide_buffer_get_stride(_input_buffer, 1);
 int _input_stride_1 = _13;
 // produce blur_y
 par threads(int _blur_y_s0_y_y = 0 .. (0 + 128))
  context 0 <= _blur_y_s0_y_y && _blur_y_s0_y_y < 0 + 128;
  context (\forall* int _0, int _1; ((0 <= _0) && (_0 < 1026)) && ((0 <= _1) && (_1 < 1026)); Perm(_input[(_1*1026) + _0], read));
  requires (\forall int _0, int _1; (((0 <= _0) && (_0 < 1026)) && (0 <= _1)) && (_1 < 1026); 0 <= _input[(_1*1026) + _0]);
  requires (\forall int _0, int _1; (((0 <= _0) && (_0 < 1026)) && (0 <= _1)) && (_1 < 1026); _input[(_1*1026) + _0] < 256);
  context (\forall* int _blur_y_s0_x_v0_forall, int _blur_y_s0_x_x_forall, int _blur_y_s0_y_yi_forall; (((((0 <= _blur_y_s0_y_yi_forall) && (_blur_y_s0_y_yi_forall < 8)) && (0 <= _blur_y_s0_x_x_forall)) && (_blur_y_s0_x_x_forall < 128)) && (0 <= _blur_y_s0_x_v0_forall)) && (_blur_y_s0_x_v0_forall < 8); Perm(_blur_y[(((_blur_y_s0_y_y*8) + _blur_y_s0_y_yi_forall)*1024) + ((_blur_y_s0_x_x_forall*8) + _blur_y_s0_x_v0_forall)], 1\1));
  ensures (\forall int _blur_y_s0_y_yi_forall, int _blur_y_s0_x_x_forall, int _blur_y_s0_x_v0_forall; (((((0 <= _blur_y_s0_y_yi_forall) && (_blur_y_s0_y_yi_forall < 8)) && (0 <= _blur_y_s0_x_x_forall)) && (_blur_y_s0_x_x_forall < 128)) && (0 <= _blur_y_s0_x_v0_forall)) && (_blur_y_s0_x_v0_forall < 8); 0 <= _blur_y[(((_blur_y_s0_y_y*8) + _blur_y_s0_y_yi_forall)*1024) + ((_blur_y_s0_x_x_forall*8) + _blur_y_s0_x_v0_forall)]);
  ensures (\forall int _blur_y_s0_y_yi_forall, int _blur_y_s0_x_x_forall, int _blur_y_s0_x_v0_forall; (((((0 <= _blur_y_s0_y_yi_forall) && (_blur_y_s0_y_yi_forall < 8)) && (0 <= _blur_y_s0_x_x_forall)) && (_blur_y_s0_x_x_forall < 128)) && (0 <= _blur_y_s0_x_v0_forall)) && (_blur_y_s0_x_v0_forall < 8); _blur_y[(((_blur_y_s0_y_y*8) + _blur_y_s0_y_yi_forall)*1024) + ((_blur_y_s0_x_x_forall*8) + _blur_y_s0_x_v0_forall)] < 256);
 {
  {
   int _14 = 1024 * 10;
   int[] _blur_x = new int[_14];
   int _t34 = (_blur_y_s0_y_y * 8);
    loop_invariant 0 <= _blur_y_s0_y_yi && _blur_y_s0_y_yi <= 0 + 8;
    loop_invariant (\forall* int _0, int _1; ((0 <= _0) && (_0 < 1026)) && ((0 <= _1) && (_1 < 1026)); Perm(_input[(_1*1026) + _0], read));
    loop_invariant (\forall int _0, int _1; (((0 <= _0) && (_0 < 1026)) && (0 <= _1)) && (_1 < 1026); 0 <= _input[(_1*1026) + _0]);
    loop_invariant (\forall int _0, int _1; (((0 <= _0) && (_0 < 1026)) && (0 <= _1)) && (_1 < 1026); _input[(_1*1026) + _0] < 256);
    loop_invariant (\forall* int _x, int _y; (((0 <= _x) && (_x < 1024)) && ((_blur_y_s0_y_y*8) <= _y)) && (_y < ((_blur_y_s0_y_y*8) + 10)); Perm(_blur_x[((_y - (_blur_y_s0_y_y*8))*1024) + _x], 1\1));
    loop_invariant (\forall* int _blur_y_s0_x_v0_forall, int _blur_y_s0_x_x_forall, int _blur_y_s0_y_yi_forall; (((((0 <= _blur_y_s0_y_yi_forall) && (_blur_y_s0_y_yi_forall < 8)) && (0 <= _blur_y_s0_x_x_forall)) && (_blur_y_s0_x_x_forall < 128)) && (0 <= _blur_y_s0_x_v0_forall)) && (_blur_y_s0_x_v0_forall < 8); Perm(_blur_y[(((_blur_y_s0_y_y*8) + _blur_y_s0_y_yi_forall)*1024) + ((_blur_y_s0_x_x_forall*8) + _blur_y_s0_x_v0_forall)], 1\1));
    loop_invariant (\forall int _blur_y_s0_y_yi_forall, int _blur_y_s0_x_x_forall, int _blur_y_s0_x_v0_forall; (((((0 <= _blur_y_s0_y_yi_forall) && (_blur_y_s0_y_yi_forall < _blur_y_s0_y_yi)) && (0 <= _blur_y_s0_x_x_forall)) && (_blur_y_s0_x_x_forall < 128)) && (0 <= _blur_y_s0_x_v0_forall)) && (_blur_y_s0_x_v0_forall < 8); 0 <= _blur_y[(((_blur_y_s0_y_y*8) + _blur_y_s0_y_yi_forall)*1024) + ((_blur_y_s0_x_x_forall*8) + _blur_y_s0_x_v0_forall)]);
    loop_invariant (\forall int _blur_y_s0_y_yi_forall, int _blur_y_s0_x_x_forall, int _blur_y_s0_x_v0_forall; (((((0 <= _blur_y_s0_y_yi_forall) && (_blur_y_s0_y_yi_forall < _blur_y_s0_y_yi)) && (0 <= _blur_y_s0_x_x_forall)) && (_blur_y_s0_x_x_forall < 128)) && (0 <= _blur_y_s0_x_v0_forall)) && (_blur_y_s0_x_v0_forall < 8); _blur_y[(((_blur_y_s0_y_y*8) + _blur_y_s0_y_yi_forall)*1024) + ((_blur_y_s0_x_x_forall*8) + _blur_y_s0_x_v0_forall)] < 256);
   for (int _blur_y_s0_y_yi = 0; _blur_y_s0_y_yi < 0 + 8; _blur_y_s0_y_yi++)
   {
    // produce blur_x
    int _t35 = (_blur_y_s0_y_yi + _t34);
     loop_invariant _t35 <= _blur_x_s0_y && _blur_x_s0_y <= _t35 + 3;
     loop_invariant (\forall* int _0, int _1; ((0 <= _0) && (_0 < 1026)) && ((0 <= _1) && (_1 < 1026)); Perm(_input[(_1*1026) + _0], read));
     loop_invariant (\forall int _0, int _1; (((0 <= _0) && (_0 < 1026)) && (0 <= _1)) && (_1 < 1026); 0 <= _input[(_1*1026) + _0]);
     loop_invariant (\forall int _0, int _1; (((0 <= _0) && (_0 < 1026)) && (0 <= _1)) && (_1 < 1026); _input[(_1*1026) + _0] < 256);
     loop_invariant (\forall* int _blur_x_s0_x_v1_forall, int _blur_x_s0_x_x_forall, int _blur_x_s0_y_forall; (((((((_blur_y_s0_y_y*8) + _blur_y_s0_y_yi) <= _blur_x_s0_y_forall) && (_blur_x_s0_y_forall < (((_blur_y_s0_y_y*8) + _blur_y_s0_y_yi) + 3))) && (0 <= _blur_x_s0_x_x_forall)) && (_blur_x_s0_x_x_forall < 128)) && (0 <= _blur_x_s0_x_v1_forall)) && (_blur_x_s0_x_v1_forall < 8); Perm(_blur_x[((_blur_x_s0_y_forall - (_blur_y_s0_y_y*8))*1024) + ((_blur_x_s0_x_x_forall*8) + _blur_x_s0_x_v1_forall)], 1\1));
     loop_invariant (\forall int _blur_x_s0_y_forall, int _blur_x_s0_x_x_forall, int _blur_x_s0_x_v1_forall; (((((((_blur_y_s0_y_y*8) + _blur_y_s0_y_yi) <= _blur_x_s0_y_forall) && (_blur_x_s0_y_forall < _blur_x_s0_y)) && (0 <= _blur_x_s0_x_x_forall)) && (_blur_x_s0_x_x_forall < 128)) && (0 <= _blur_x_s0_x_v1_forall)) && (_blur_x_s0_x_v1_forall < 8); 0 <= _blur_x[((_blur_x_s0_y_forall - (_blur_y_s0_y_y*8))*1024) + ((_blur_x_s0_x_x_forall*8) + _blur_x_s0_x_v1_forall)]);
     loop_invariant (\forall int _blur_x_s0_y_forall, int _blur_x_s0_x_x_forall, int _blur_x_s0_x_v1_forall; (((((((_blur_y_s0_y_y*8) + _blur_y_s0_y_yi) <= _blur_x_s0_y_forall) && (_blur_x_s0_y_forall < _blur_x_s0_y)) && (0 <= _blur_x_s0_x_x_forall)) && (_blur_x_s0_x_x_forall < 128)) && (0 <= _blur_x_s0_x_v1_forall)) && (_blur_x_s0_x_v1_forall < 8); _blur_x[((_blur_x_s0_y_forall - (_blur_y_s0_y_y*8))*1024) + ((_blur_x_s0_x_x_forall*8) + _blur_x_s0_x_v1_forall)] < 256);
    for (int _blur_x_s0_y = _t35; _blur_x_s0_y < _t35 + 3; _blur_x_s0_y++)
    {
     int _t37 = ((_blur_x_s0_y - _t34) * 128);
     int _t36 = (_blur_x_s0_y * 1026);
      loop_invariant 0 <= _blur_x_s0_x_x && _blur_x_s0_x_x <= 0 + 128;
      loop_invariant (\forall* int _0, int _1; ((0 <= _0) && (_0 < 1026)) && ((0 <= _1) && (_1 < 1026)); Perm(_input[(_1*1026) + _0], read));
      loop_invariant (\forall int _0, int _1; (((0 <= _0) && (_0 < 1026)) && (0 <= _1)) && (_1 < 1026); 0 <= _input[(_1*1026) + _0]);
      loop_invariant (\forall int _0, int _1; (((0 <= _0) && (_0 < 1026)) && (0 <= _1)) && (_1 < 1026); _input[(_1*1026) + _0] < 256);
      loop_invariant (\forall* int _blur_x_s0_x_v1_forall, int _blur_x_s0_x_x_forall; (((0 <= _blur_x_s0_x_x_forall) && (_blur_x_s0_x_x_forall < 128)) && (0 <= _blur_x_s0_x_v1_forall)) && (_blur_x_s0_x_v1_forall < 8); Perm(_blur_x[((_blur_x_s0_y - (_blur_y_s0_y_y*8))*1024) + ((_blur_x_s0_x_x_forall*8) + _blur_x_s0_x_v1_forall)], 1\1));
      loop_invariant (\forall int _blur_x_s0_x_x_forall, int _blur_x_s0_x_v1_forall; (((0 <= _blur_x_s0_x_x_forall) && (_blur_x_s0_x_x_forall < _blur_x_s0_x_x)) && (0 <= _blur_x_s0_x_v1_forall)) && (_blur_x_s0_x_v1_forall < 8); 0 <= _blur_x[((_blur_x_s0_y - (_blur_y_s0_y_y*8))*1024) + ((_blur_x_s0_x_x_forall*8) + _blur_x_s0_x_v1_forall)]);
      loop_invariant (\forall int _blur_x_s0_x_x_forall, int _blur_x_s0_x_v1_forall; (((0 <= _blur_x_s0_x_x_forall) && (_blur_x_s0_x_x_forall < _blur_x_s0_x_x)) && (0 <= _blur_x_s0_x_v1_forall)) && (_blur_x_s0_x_v1_forall < 8); _blur_x[((_blur_x_s0_y - (_blur_y_s0_y_y*8))*1024) + ((_blur_x_s0_x_x_forall*8) + _blur_x_s0_x_v1_forall)] < 256);
     for (int _blur_x_s0_x_x = 0; _blur_x_s0_x_x < 0 + 128; _blur_x_s0_x_x++)
     {
      int _t25 = ((_blur_x_s0_x_x * 8) + _t36);
      int _15 = _input[(_t25 + 1)];
      int _16 = _input[(_t25 + 2)];
      int _17 = _input[_t25];
      _blur_x[((_blur_x_s0_x_x + _t37) * 8)] = ((_15 + (_16 + _17)) / 3);
      int _18 = _input[(_t25 + 2)];
      int _19 = _input[(_t25 + 3)];
      int _20 = _input[(_t25 + 1)];
      _blur_x[(((_blur_x_s0_x_x + _t37) * 8) + 1)] = ((_18 + (_19 + _20)) / 3);
      int _21 = _input[(_t25 + 3)];
      int _22 = _input[(_t25 + 4)];
      int _23 = _input[(_t25 + 2)];
      _blur_x[(((_blur_x_s0_x_x + _t37) * 8) + 2)] = ((_21 + (_22 + _23)) / 3);
      int _24 = _input[(_t25 + 4)];
      int _25 = _input[(_t25 + 5)];
      int _26 = _input[(_t25 + 3)];
      _blur_x[(((_blur_x_s0_x_x + _t37) * 8) + 3)] = ((_24 + (_25 + _26)) / 3);
      int _27 = _input[(_t25 + 5)];
      int _28 = _input[(_t25 + 6)];
      int _29 = _input[(_t25 + 4)];
      _blur_x[(((_blur_x_s0_x_x + _t37) * 8) + 4)] = ((_27 + (_28 + _29)) / 3);
      int _30 = _input[(_t25 + 6)];
      int _31 = _input[(_t25 + 7)];
      int _32 = _input[(_t25 + 5)];
      _blur_x[(((_blur_x_s0_x_x + _t37) * 8) + 5)] = ((_30 + (_31 + _32)) / 3);
      int _33 = _input[(_t25 + 7)];
      int _34 = _input[(_t25 + 8)];
      int _35 = _input[(_t25 + 6)];
      _blur_x[(((_blur_x_s0_x_x + _t37) * 8) + 6)] = ((_33 + (_34 + _35)) / 3);
      int _36 = _input[(_t25 + 8)];
      int _37 = _input[(_t25 + 9)];
      int _38 = _input[(_t25 + 7)];
      _blur_x[(((_blur_x_s0_x_x + _t37) * 8) + 7)] = ((_36 + (_37 + _38)) / 3);
     } // for _blur_x_s0_x_x
    } // for _blur_x_s0_y
    // consume blur_x
    int _t39 = ((_blur_y_s0_y_yi + _t34) * 128);
    int _t38 = (_blur_y_s0_y_yi * 128);
     loop_invariant 0 <= _blur_y_s0_x_x && _blur_y_s0_x_x <= 0 + 128;
     loop_invariant (\forall* int _0, int _1; ((0 <= _0) && (_0 < 1026)) && ((0 <= _1) && (_1 < 1026)); Perm(_input[(_1*1026) + _0], read));
     loop_invariant (\forall int _0, int _1; (((0 <= _0) && (_0 < 1026)) && (0 <= _1)) && (_1 < 1026); 0 <= _input[(_1*1026) + _0]);
     loop_invariant (\forall int _0, int _1; (((0 <= _0) && (_0 < 1026)) && (0 <= _1)) && (_1 < 1026); _input[(_1*1026) + _0] < 256);
     loop_invariant (\forall* int _x, int _y; (((0 <= _x) && (_x < 1024)) && ((_blur_y_s0_y_y*8) <= _y)) && (_y < ((_blur_y_s0_y_y*8) + 10)); Perm(_blur_x[((_y - (_blur_y_s0_y_y*8))*1024) + _x], 1\2));
     loop_invariant (\forall int _blur_x_s0_x, int _blur_x_s0_y; (((0 <= _blur_x_s0_x) && (_blur_x_s0_x <= 1023)) && (((_blur_y_s0_y_y*8) + _blur_y_s0_y_yi) <= _blur_x_s0_y)) && (_blur_x_s0_y <= (((_blur_y_s0_y_y*8) + _blur_y_s0_y_yi) + 2)); 0 <= _blur_x[((_blur_x_s0_y - (_blur_y_s0_y_y*8))*1024) + _blur_x_s0_x]);
     loop_invariant (\forall int _blur_x_s0_x, int _blur_x_s0_y; (((0 <= _blur_x_s0_x) && (_blur_x_s0_x <= 1023)) && (((_blur_y_s0_y_y*8) + _blur_y_s0_y_yi) <= _blur_x_s0_y)) && (_blur_x_s0_y <= (((_blur_y_s0_y_y*8) + _blur_y_s0_y_yi) + 2)); _blur_x[((_blur_x_s0_y - (_blur_y_s0_y_y*8))*1024) + _blur_x_s0_x] < 256);
     loop_invariant (\forall* int _blur_y_s0_x_v0_forall, int _blur_y_s0_x_x_forall; (((0 <= _blur_y_s0_x_x_forall) && (_blur_y_s0_x_x_forall < 128)) && (0 <= _blur_y_s0_x_v0_forall)) && (_blur_y_s0_x_v0_forall < 8); Perm(_blur_y[(((_blur_y_s0_y_y*8) + _blur_y_s0_y_yi)*1024) + ((_blur_y_s0_x_x_forall*8) + _blur_y_s0_x_v0_forall)], 1\1));
     loop_invariant (\forall int _blur_y_s0_x_x_forall, int _blur_y_s0_x_v0_forall; (((0 <= _blur_y_s0_x_x_forall) && (_blur_y_s0_x_x_forall < _blur_y_s0_x_x)) && (0 <= _blur_y_s0_x_v0_forall)) && (_blur_y_s0_x_v0_forall < 8); 0 <= _blur_y[(((_blur_y_s0_y_y*8) + _blur_y_s0_y_yi)*1024) + ((_blur_y_s0_x_x_forall*8) + _blur_y_s0_x_v0_forall)]);
     loop_invariant (\forall int _blur_y_s0_x_x_forall, int _blur_y_s0_x_v0_forall; (((0 <= _blur_y_s0_x_x_forall) && (_blur_y_s0_x_x_forall < _blur_y_s0_x_x)) && (0 <= _blur_y_s0_x_v0_forall)) && (_blur_y_s0_x_v0_forall < 8); _blur_y[(((_blur_y_s0_y_y*8) + _blur_y_s0_y_yi)*1024) + ((_blur_y_s0_x_x_forall*8) + _blur_y_s0_x_v0_forall)] < 256);
    for (int _blur_y_s0_x_x = 0; _blur_y_s0_x_x < 0 + 128; _blur_y_s0_x_x++)
    {
     int _t26 = (_blur_y_s0_x_x + _t38);
     int _39 = _blur_x[((_t26 * 8) + 1024)];
     int _40 = _blur_x[((_t26 * 8) + 2048)];
     int _41 = _blur_x[(_t26 * 8)];
     _blur_y[((_blur_y_s0_x_x + _t39) * 8)] = ((_39 + (_40 + _41)) / 3);
     int _t27 = (_blur_y_s0_x_x + _t38);
     int _42 = _blur_x[((_t27 * 8) + 1025)];
     int _43 = _blur_x[((_t27 * 8) + 2049)];
     int _44 = _blur_x[((_t27 * 8) + 1)];
     _blur_y[(((_blur_y_s0_x_x + _t39) * 8) + 1)] = ((_42 + (_43 + _44)) / 3);
     int _t28 = (_blur_y_s0_x_x + _t38);
     int _45 = _blur_x[((_t28 * 8) + 1026)];
     int _46 = _blur_x[((_t28 * 8) + 2050)];
     int _47 = _blur_x[((_t28 * 8) + 2)];
     _blur_y[(((_blur_y_s0_x_x + _t39) * 8) + 2)] = ((_45 + (_46 + _47)) / 3);
     int _t29 = (_blur_y_s0_x_x + _t38);
     int _48 = _blur_x[((_t29 * 8) + 1027)];
     int _49 = _blur_x[((_t29 * 8) + 2051)];
     int _50 = _blur_x[((_t29 * 8) + 3)];
     _blur_y[(((_blur_y_s0_x_x + _t39) * 8) + 3)] = ((_48 + (_49 + _50)) / 3);
     int _t30 = (_blur_y_s0_x_x + _t38);
     int _51 = _blur_x[((_t30 * 8) + 1028)];
     int _52 = _blur_x[((_t30 * 8) + 2052)];
     int _53 = _blur_x[((_t30 * 8) + 4)];
     _blur_y[(((_blur_y_s0_x_x + _t39) * 8) + 4)] = ((_51 + (_52 + _53)) / 3);
     int _t31 = (_blur_y_s0_x_x + _t38);
     int _54 = _blur_x[((_t31 * 8) + 1029)];
     int _55 = _blur_x[((_t31 * 8) + 2053)];
     int _56 = _blur_x[((_t31 * 8) + 5)];
     _blur_y[(((_blur_y_s0_x_x + _t39) * 8) + 5)] = ((_54 + (_55 + _56)) / 3);
     int _t32 = (_blur_y_s0_x_x + _t38);
     int _57 = _blur_x[((_t32 * 8) + 1030)];
     int _58 = _blur_x[((_t32 * 8) + 2054)];
     int _59 = _blur_x[((_t32 * 8) + 6)];
     _blur_y[(((_blur_y_s0_x_x + _t39) * 8) + 6)] = ((_57 + (_58 + _59)) / 3);
     int _t33 = (_blur_y_s0_x_x + _t38);
     int _60 = _blur_x[((_t33 * 8) + 1031)];
     int _61 = _blur_x[((_t33 * 8) + 2055)];
     int _62 = _blur_x[((_t33 * 8) + 7)];
     _blur_y[(((_blur_y_s0_x_x + _t39) * 8) + 7)] = ((_60 + (_61 + _62)) / 3);
    } // for _blur_y_s0_x_x
   } // for _blur_y_s0_y_yi
  } // alloc _blur_x
 } // for _blur_y_s0_y_y
 return 0;
}
