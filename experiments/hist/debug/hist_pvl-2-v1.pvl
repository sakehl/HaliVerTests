
/* MACHINE GENERATED By Halide. */

pure int max(int x, int y) = x > y ? x : y;

pure int min(int x, int y) = x > y ? y : x;

pure rational max(rational x, rational y) = x > y ? x : y;

pure rational min(rational x, rational y) = x > y ? y : x;

pure int abs(int x) = x > 0 ? x : -x;

pure rational int_to_float(int x);

pure int float_to_int(rational x);

    class halide_buffer_int {
   int[] host;
    int min_0;
    int min_1;
    int min_2;
    int min_3;

    int extent_0;
    int extent_1;
    int extent_2;
    int extent_3;

    int stride_0;
    int stride_1;
    int stride_2;
    int stride_3;
}

requires Perm(b.host, read);
pure int[] _halide_buffer_get_host(halide_buffer_int b) = b.host;

requires 0 <= dim && dim < 4;
requires dim == 0 ==> Perm(b.min_0, read);
requires dim == 1 ==> Perm(b.min_1, read);
requires dim == 2 ==> Perm(b.min_2, read);
requires dim == 3 ==> Perm(b.min_3, read);
pure int _halide_buffer_get_min(halide_buffer_int b, int dim) = dim == 0 ? b.min_0 : (dim == 1 ? b.min_1 : (dim == 2 ? b.min_2 : b.min_3));


requires 0 <= dim && dim < 4;
requires dim == 0 ==> Perm(b.stride_0, read);
requires dim == 1 ==> Perm(b.stride_1, read);
requires dim == 2 ==> Perm(b.stride_2, read);
requires dim == 3 ==> Perm(b.stride_3, read);
pure int _halide_buffer_get_stride(halide_buffer_int b, int dim) = dim == 0 ? b.stride_0 : (dim == 1 ? b.stride_1 : (dim == 2 ? b.stride_2 : b.stride_3));

requires 0 <= dim && dim < 4;
requires dim == 0 ==> Perm(b.extent_0, read);
requires dim == 1 ==> Perm(b.extent_1, read);
requires dim == 2 ==> Perm(b.extent_2, read);
requires dim == 3 ==> Perm(b.extent_3, read);
pure int _halide_buffer_get_extent(halide_buffer_int b, int dim) = dim == 0 ? b.extent_0 : (dim == 1 ? b.extent_1 : (dim == 2 ? b.extent_2 : b.extent_3));

    class halide_buffer_rational {
   rational[] host;
    int min_0;
    int min_1;
    int min_2;
    int min_3;

    int extent_0;
    int extent_1;
    int extent_2;
    int extent_3;

    int stride_0;
    int stride_1;
    int stride_2;
    int stride_3;
}

requires Perm(b.host, read);
pure rational[] _halide_buffer_get_host(halide_buffer_rational b) = b.host;

requires 0 <= dim && dim < 4;
requires dim == 0 ==> Perm(b.min_0, read);
requires dim == 1 ==> Perm(b.min_1, read);
requires dim == 2 ==> Perm(b.min_2, read);
requires dim == 3 ==> Perm(b.min_3, read);
pure int _halide_buffer_get_min(halide_buffer_rational b, int dim) = dim == 0 ? b.min_0 : (dim == 1 ? b.min_1 : (dim == 2 ? b.min_2 : b.min_3));


requires 0 <= dim && dim < 4;
requires dim == 0 ==> Perm(b.stride_0, read);
requires dim == 1 ==> Perm(b.stride_1, read);
requires dim == 2 ==> Perm(b.stride_2, read);
requires dim == 3 ==> Perm(b.stride_3, read);
pure int _halide_buffer_get_stride(halide_buffer_rational b, int dim) = dim == 0 ? b.stride_0 : (dim == 1 ? b.stride_1 : (dim == 2 ? b.stride_2 : b.stride_3));

requires 0 <= dim && dim < 4;
requires dim == 0 ==> Perm(b.extent_0, read);
requires dim == 1 ==> Perm(b.extent_1, read);
requires dim == 2 ==> Perm(b.extent_2, read);
requires dim == 3 ==> Perm(b.extent_3, read);
pure int _halide_buffer_get_extent(halide_buffer_rational b, int dim) = dim == 0 ? b.extent_0 : (dim == 1 ? b.extent_1 : (dim == 2 ? b.extent_2 : b.extent_3));



 context Perm(_input_buffer.host, read) ** _input_buffer.host != null;
 context Perm(_input_buffer.min_0, read) ** Perm(_input_buffer.stride_0, read) ** Perm(_input_buffer.extent_0, read);
 context Perm(_input_buffer.min_1, read) ** Perm(_input_buffer.stride_1, read) ** Perm(_input_buffer.extent_1, read);
 context Perm(_input_buffer.min_2, read) ** Perm(_input_buffer.stride_2, read) ** Perm(_input_buffer.extent_2, read);
 context Perm(_input_buffer.host, read) ** _input_buffer.host != null;
 context _input_buffer.host.length == 1  + abs(_input_buffer.stride_0) * (_input_buffer.extent_0 - 1) + abs(_input_buffer.stride_1) * (_input_buffer.extent_1 - 1) + abs(_input_buffer.stride_2) * (_input_buffer.extent_2 - 1);
 context Perm(_output_buffer.host, read) ** _output_buffer.host != null;
 context Perm(_output_buffer.min_0, read) ** Perm(_output_buffer.stride_0, read) ** Perm(_output_buffer.extent_0, read);
 context Perm(_output_buffer.min_1, read) ** Perm(_output_buffer.stride_1, read) ** Perm(_output_buffer.extent_1, read);
 context Perm(_output_buffer.min_2, read) ** Perm(_output_buffer.stride_2, read) ** Perm(_output_buffer.extent_2, read);
 context Perm(_output_buffer.host, read) ** _output_buffer.host != null;
 context _output_buffer.host.length == 1  + abs(_output_buffer.stride_0) * (_output_buffer.extent_0 - 1) + abs(_output_buffer.stride_1) * (_output_buffer.extent_1 - 1) + abs(_output_buffer.stride_2) * (_output_buffer.extent_2 - 1);
 context ((_input_buffer.min_0 == 0) && (_input_buffer.extent_0 == 1536)) && (_input_buffer.stride_0 == 1);
 context ((_input_buffer.min_1 == 0) && (_input_buffer.extent_1 == 2560)) && (_input_buffer.stride_1 == 1536);
 context ((_input_buffer.min_2 == 0) && (_input_buffer.extent_2 == 3)) && (_input_buffer.stride_2 == 3932160);
 context (\forall* int _0, int _1, int _2; (((((0 <= _0) && (_0 < 1536)) && (0 <= _1)) && (_1 < 2560)) && (0 <= _2)) && (_2 < 3); Perm(_input_buffer.host[(_2*3932160) + ((_1*1536) + _0)], read));
 context ((_output_buffer.min_0 == 0) && (_output_buffer.extent_0 == 1536)) && (_output_buffer.stride_0 == 1);
 context ((_output_buffer.min_1 == 0) && (_output_buffer.extent_1 == 2560)) && (_output_buffer.stride_1 == 1536);
 context ((_output_buffer.min_2 == 0) && (_output_buffer.extent_2 == 3)) && (_output_buffer.stride_2 == 3932160);
 context (\forall* int _0, int _1, int _2; (((((0 <= _0) && (_0 < 1536)) && (0 <= _1)) && (_1 < 2560)) && (0 <= _2)) && (_2 < 3); Perm(_output_buffer.host[(_2*3932160) + ((_1*1536) + _0)], 1\1));
int hist(halide_buffer_int _input_buffer, halide_buffer_int _output_buffer) {
 int[] _input = _halide_buffer_get_host(_input_buffer);
 int _input_min_0 = _halide_buffer_get_min(_input_buffer, 0);
 int _input_extent_0 = _halide_buffer_get_extent(_input_buffer, 0);
 int _input_stride_0 = _halide_buffer_get_stride(_input_buffer, 0);
 int _input_min_1 = _halide_buffer_get_min(_input_buffer, 1);
 int _input_extent_1 = _halide_buffer_get_extent(_input_buffer, 1);
 int _input_stride_1 = _halide_buffer_get_stride(_input_buffer, 1);
 int _input_min_2 = _halide_buffer_get_min(_input_buffer, 2);
 int _input_extent_2 = _halide_buffer_get_extent(_input_buffer, 2);
 int _input_stride_2 = _halide_buffer_get_stride(_input_buffer, 2);
 int[] _output = _halide_buffer_get_host(_output_buffer);
 int _output_min_0 = _halide_buffer_get_min(_output_buffer, 0);
 int _output_extent_0 = _halide_buffer_get_extent(_output_buffer, 0);
 int _output_stride_0 = _halide_buffer_get_stride(_output_buffer, 0);
 int _output_min_1 = _halide_buffer_get_min(_output_buffer, 1);
 int _output_extent_1 = _halide_buffer_get_extent(_output_buffer, 1);
 int _output_stride_1 = _halide_buffer_get_stride(_output_buffer, 1);
 int _output_min_2 = _halide_buffer_get_min(_output_buffer, 2);
 int _output_extent_2 = _halide_buffer_get_extent(_output_buffer, 2);
 int _output_stride_2 = _halide_buffer_get_stride(_output_buffer, 2);
 {
  int[] _Y = new int[1536 * 2560];
  {
   int[] _hist = new int[256];
   // produce hist
    loop_invariant 0 <= _hist_s0_x && _hist_s0_x <= 0 + 256;
    loop_invariant (\forall* int _0, int _1, int _2; (((0 <= _0) && (_0 < 1536)) && ((0 <= _1) && (_1 < 2560))) && ((0 <= _2) && (_2 < 3)); Perm(_input[(_2*3932160) + ((_1*1536) + _0)], read));
    loop_invariant (\forall* int _x, int _y; (((0 <= _x) && (_x < 1536)) && (0 <= _y)) && (_y < 2560); Perm(_Y[(_y*1536) + _x], 1\2));
    loop_invariant (\forall* int _hist_s0_x_forall; (0 <= _hist_s0_x_forall) && (_hist_s0_x_forall < 256); Perm(_hist[_hist_s0_x_forall], 1\1));
    loop_invariant (\forall int _hist_s0_x_forall; (0 <= _hist_s0_x_forall) && (_hist_s0_x_forall < _hist_s0_x); _hist[_hist_s0_x_forall] == 0);
   for (int _hist_s0_x = 0; _hist_s0_x < 0 + 256; _hist_s0_x++)
   {
    _hist[_hist_s0_x] = 0;
   } // for _hist_s0_x
   // consume Y
    loop_invariant 0 <= _hist_s1_x && _hist_s1_x <= 0 + 256;
    loop_invariant (\forall* int _0, int _1, int _2; (((0 <= _0) && (_0 < 1536)) && ((0 <= _1) && (_1 < 2560))) && ((0 <= _2) && (_2 < 3)); Perm(_input[(_2*3932160) + ((_1*1536) + _0)], read));
    loop_invariant (\forall* int _x, int _y; (((0 <= _x) && (_x < 1536)) && (0 <= _y)) && (_y < 2560); Perm(_Y[(_y*1536) + _x], 1\2));
    loop_invariant (\forall* int _hist_s1_x_forall; (0 <= _hist_s1_x_forall) && (_hist_s1_x_forall < 256); Perm(_hist[_hist_s1_x_forall], 1\1));
    loop_invariant (\forall int _hist_s1_x_forall; (_hist_s1_x <= _hist_s1_x_forall) && (_hist_s1_x_forall < 256); _hist[_hist_s1_x_forall] == 0);
    loop_invariant (\forall int _hist_s1_x_forall; (0 <= _hist_s1_x_forall) && (_hist_s1_x_forall < _hist_s1_x); _hist[_hist_s1_x_forall] <= 3932160);
   for (int _hist_s1_x = 0; _hist_s1_x < 0 + 256; _hist_s1_x++)
   {
     loop_invariant 0 <= _hist_s1_r22__x && _hist_s1_r22__x <= 0 + 2560;
     loop_invariant (\forall* int _0, int _1, int _2; (((0 <= _0) && (_0 < 1536)) && ((0 <= _1) && (_1 < 2560))) && ((0 <= _2) && (_2 < 3)); Perm(_input[(_2*3932160) + ((_1*1536) + _0)], read));
     loop_invariant (\forall* int _x, int _y; (((0 <= _x) && (_x < 1536)) && (0 <= _y)) && (_y < 2560); Perm(_Y[(_y*1536) + _x], 1\2));
     loop_invariant Perm(_hist[_hist_s1_x], 1\1);
     loop_invariant _hist[_hist_s1_x] <= (_hist_s1_r22__x*1536);
    for (int _hist_s1_r22__x = 0; _hist_s1_r22__x < 0 + 2560; _hist_s1_r22__x++)
    {
     {
      int[] _hist_rows = new int[256 * 1];
      // produce hist_rows
       loop_invariant 0 <= _hist_rows_s0_x && _hist_rows_s0_x <= 0 + 256;
       loop_invariant (\forall* int _0, int _1, int _2; (((0 <= _0) && (_0 < 1536)) && ((0 <= _1) && (_1 < 2560))) && ((0 <= _2) && (_2 < 3)); Perm(_input[(_2*3932160) + ((_1*1536) + _0)], read));
       loop_invariant (\forall* int _x, int _y; (((0 <= _x) && (_x < 1536)) && (0 <= _y)) && (_y < 2560); Perm(_Y[(_y*1536) + _x], 1\2));
       loop_invariant (\forall* int _hist_rows_s0_x_forall; (0 <= _hist_rows_s0_x_forall) && (_hist_rows_s0_x_forall < 256); Perm(_hist_rows[_hist_rows_s0_x_forall], 1\1));
       loop_invariant (\forall int _hist_rows_s0_x_forall; (0 <= _hist_rows_s0_x_forall) && (_hist_rows_s0_x_forall < _hist_rows_s0_x); _hist_rows[_hist_rows_s0_x_forall] == 0);
      for (int _hist_rows_s0_x = 0; _hist_rows_s0_x < 0 + 256; _hist_rows_s0_x++)
      {
       _hist_rows[_hist_rows_s0_x] = 0;
      } // for _hist_rows_s0_x
      int _t52 = (_hist_s1_r22__x * 1536);
       loop_invariant 0 <= _hist_rows_s1_r15__x && _hist_rows_s1_r15__x <= 0 + 1536;
       loop_invariant (\forall* int _0, int _1, int _2; (((0 <= _0) && (_0 < 1536)) && ((0 <= _1) && (_1 < 2560))) && ((0 <= _2) && (_2 < 3)); Perm(_input[(_2*3932160) + ((_1*1536) + _0)], read));
       loop_invariant (\forall* int _x, int _y; (((0 <= _x) && (_x < 1536)) && (0 <= _y)) && (_y < 2560); Perm(_Y[(_y*1536) + _x], 1\2));
       loop_invariant (\forall* int _hist_rows_s1_x_forall; (0 <= _hist_rows_s1_x_forall) && (_hist_rows_s1_x_forall < 256); Perm(_hist_rows[_hist_rows_s1_x_forall], 1\1));
       loop_invariant (\forall int _hist_rows_s1_x_forall; (0 <= _hist_rows_s1_x_forall) && (_hist_rows_s1_x_forall < 256); _hist_rows[_hist_rows_s1_x_forall] <= _hist_rows_s1_r15__x);
      for (int _hist_rows_s1_r15__x = 0; _hist_rows_s1_r15__x < 0 + 1536; _hist_rows_s1_r15__x++)
      {
       int _t39_s = _Y[(_hist_rows_s1_r15__x + _t52)];
       int _t46 = max(min(_t39_s, 255), 0);
       _hist_rows[_t46] = (_hist_rows[_t46] + 1);
      } // for _hist_rows_s1_r15__x
      // consume hist_rows
      _hist[_hist_s1_x] = (_hist[_hist_s1_x] + _hist_rows[_hist_s1_x]);
     } // alloc _hist_rows
    } // for _hist_s1_r22__x
   } // for _hist_s1_x
   {
    int[] _equalize = new int[1536 * 2560];
    // consume Y
    par threads(int _output_s0_y = 0 .. (0 + 2560))
     context 0 <= _output_s0_y && _output_s0_y < 0 + 2560;
     context (\forall* int _0, int _1, int _2; (((0 <= _0) && (_0 < 1536)) && ((0 <= _1) && (_1 < 2560))) && ((0 <= _2) && (_2 < 3)); Perm(_input[(_2*3932160) + ((_1*1536) + _0)], read));
     context (\forall* int _x, int _y; (((0 <= _x) && (_x < 1536)) && (0 <= _y)) && (_y < 2560); Perm(_Y[(_y*1536) + _x], 1\(2*2560)));
     context (\forall* int _x; (0 <= _x) && (_x < 256); Perm(_hist[_x], 1\(2*2560)));
     context (\forall int _hist_s1_x; (0 <= _hist_s1_x) && (_hist_s1_x <= 255); _hist[_hist_s1_x] <= 3932160);
     context (\forall* int _x, int _y; (((0 <= _x) && (_x < 1536)) && (0 <= _y)) && (_y < 2560); Perm(_equalize[(_y*1536) + _x], 1\(2*2560)));
     context (\forall* int _output_s0_c_forall, int _output_s0_x_forall; (((0 <= _output_s0_x_forall) && (_output_s0_x_forall < 1536)) && (0 <= _output_s0_c_forall)) && (_output_s0_c_forall < 3); Perm(_output[(_output_s0_y*1536) + ((_output_s0_c_forall*3932160) + _output_s0_x_forall)], 1\1));
    {
     int _t54 = (_output_s0_y * 1536);
      loop_invariant 0 <= _output_s0_x && _output_s0_x <= 0 + 1536;
      loop_invariant (\forall* int _0, int _1, int _2; (((0 <= _0) && (_0 < 1536)) && ((0 <= _1) && (_1 < 2560))) && ((0 <= _2) && (_2 < 3)); Perm(_input[(_2*3932160) + ((_1*1536) + _0)], read));
      loop_invariant (\forall* int _x, int _y; (((0 <= _x) && (_x < 1536)) && (0 <= _y)) && (_y < 2560); Perm(_Y[(_y*1536) + _x], 1\(2*2560)));
      loop_invariant (\forall* int _x; (0 <= _x) && (_x < 256); Perm(_hist[_x], 1\(2*2560)));
      loop_invariant (\forall int _hist_s1_x; (0 <= _hist_s1_x) && (_hist_s1_x <= 255); _hist[_hist_s1_x] <= 3932160);
      loop_invariant (\forall* int _x, int _y; (((0 <= _x) && (_x < 1536)) && (0 <= _y)) && (_y < 2560); Perm(_equalize[(_y*1536) + _x], 1\(2*2560)));
      loop_invariant (\forall* int _output_s0_c_forall, int _output_s0_x_forall; (((0 <= _output_s0_x_forall) && (_output_s0_x_forall < 1536)) && (0 <= _output_s0_c_forall)) && (_output_s0_c_forall < 3); Perm(_output[(_output_s0_y*1536) + ((_output_s0_c_forall*3932160) + _output_s0_x_forall)], 1\1));
     for (int _output_s0_x = 0; _output_s0_x < 0 + 1536; _output_s0_x++)
     {
      int _t48 = (_output_s0_x + _t54);
      _output[_t48] = max(min((_equalize[_t48] + (((((_input[_t48] - _Y[_t48]) * 713) / 1000) * 1400) / 1000)), 255), 0);
      int _t43 = _Y[(_output_s0_x + _t54)];
      int _t49 = (_output_s0_x + _t54);
      _output[(_t49 + 3932160)] = max(min((_equalize[_t49] + (((0 - ((((_input[(_t49 + 7864320)] - _t43) * 564) / 1000) * 343)) - ((((_input[_t49] - _t43) * 713) / 1000) * 711)) / 1000)), 255), 0);
      int _t50 = (_output_s0_x + _t54);
      _output[(_t50 + 7864320)] = max(min((_equalize[_t50] + (((((_input[(_t50 + 7864320)] - _Y[_t50]) * 564) / 1000) * 1765) / 1000)), 255), 0);
     } // for _output_s0_x
    } // for _output_s0_y
   } // alloc _equalize
  } // alloc _hist
 } // alloc _Y
 return 0;
}
